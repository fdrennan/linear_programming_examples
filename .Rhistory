add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(rho[i,j]*x[i, j], i = 1:n, j=1:n, "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i] * bin_size, i = 1:max_bins) %>%
add_constraint(sum_expr(y[i], i = 1:n) == q)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 5
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(rho[i,j]*x[i, j], i = 1:n, j=1:n, "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i] * bin_size, i = 1:max_bins) %>%
add_constraint(sum_expr(y[i], i = 1:n) == q)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 5
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(rho[i,j]*x[i, j], i = 1:n, j=1:n, "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i] * bin_size, i = 1:n) %>%
add_constraint(sum_expr(y[i], i = 1:n) == q)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 5
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary")
# set_objective(rho[i,j]*x[i, j], i = 1:n, j=1:n, "min") %>%
# add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i] * bin_size, i = 1:n) %>%
# add_constraint(sum_expr(y[i], i = 1:n) == q)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 5
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(rho[i,j]*x[i, j], i = 1:n, j=1:n, "min")
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 5
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min")
# add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i] * bin_size, i = 1:n) %>%
# add_constraint(sum_expr(y[i], i = 1:n) == q)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 5
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n)
# add_constraint(sum_expr(y[i], i = 1:n) == q)
extract_constraints(model)
library(tidyquant)
hc_stocks <-
tickers %>%
filter(gics_sector == 'Health Care') %>%
head(30) %>%
pull(symbol)
stocks <- tq_get(hc_stocks, complete_cases = TRUE)
library(tidyquant)
hc_stocks <-
tickers %>%
filter(gics_sector == 'Health Care') %>%
head(5) %>%
pull(symbol)
stocks <- tq_get(hc_stocks, complete_cases = TRUE)
stocks <-
stocks %>%
select(symbol, date, adjusted) %>%
group_by(symbol) %>%
transmute(statistic_date = date,
change = log(lag(adjusted)/adjusted)) %>%
ungroup %>%
filter(!is.na(change)) %>%
pivot_wider(names_from = symbol, values_from = change)
stocks
library(Amelia)
missmap(stocks)
stocks <-
stocks %>%
select(-statistic_date, -IQV, -ABBV, -ZBH, -WAT, -ZTS, -WCG, -HCA)
stocks <-
stocks %>%
select_if(function(x) {all(!is.na(x))})
missmap(stocks)
rho = cor(stocks)
stocks
rho = cor(stocks)
stocks <-
stocks %>%
select_if(function(x) {all(!is.na(x))}) %>%
select(-statistic_date)
missmap(stocks)
rho = cor(stocks)
rho
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n)
# add_constraint(sum_expr(y[i], i = 1:n) == q)
extract_constraints(model)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(y[i] = q, i=1:n)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(sum_expr(y[i]) = q, i=1:n)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(sum_expr(y[i]) == q, i=1:n)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(sum_expr(y[i], i=1:n) == q)
# add_constraint(sum_expr(y[i], i = 1:n) == q)
extract_constraints(model)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j} <= y[j]]), i = 1:n, j=1:n)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j}) <= y[j]], i = 1:n, j=1:n)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j]) <= y[j]], i = 1:n, j=1:n)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j] <= y[j]]), i = 1:n, j=1:n)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j] <= y[j]), i = 1:n, j=1:n)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j])<= y[j], i = 1:n, j=1:n)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(x[i, j] <= y[j], i = 1:n, j=1:n)
# add_constraint(sum_expr(y[i], i = 1:n) == q)
extract_constraints(model)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(x[i, j] <= y[j], i = 1:n, j=1:n)
extract_constraints(model)
library(rvest)
library(tidyverse)
tickers <-
'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies#S&P_500_component_stocks' %>%
read_html %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
tickers <-
tickers %>%
rename_all(~ str_replace_all(str_to_lower(.), " ", "_"))
library(tidyquant)
hc_stocks <-
tickers %>%
filter(gics_sector == 'Health Care') %>%
head(5) %>%
pull(symbol)
stocks <- tq_get(hc_stocks, complete_cases = TRUE)
stocks <-
stocks %>%
select(symbol, date, adjusted) %>%
group_by(symbol) %>%
transmute(statistic_date = date,
change = log(lag(adjusted)/adjusted)) %>%
ungroup %>%
filter(!is.na(change)) %>%
pivot_wider(names_from = symbol, values_from = change)
library(Amelia)
missmap(stocks)
stocks <-
stocks %>%
select_if(function(x) {all(!is.na(x))}) %>%
select(-statistic_date)
missmap(stocks)
rho = cor(stocks)
rho
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(x[i, j] <= y[j], i = 1:n, j=1:n)
extract_constraints(model)
library(rvest)
library(tidyverse)
tickers <-
'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies#S&P_500_component_stocks' %>%
read_html %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
tickers <-
tickers %>%
rename_all(~ str_replace_all(str_to_lower(.), " ", "_"))
library(tidyquant)
hc_stocks <-
tickers %>%
filter(gics_sector == 'Health Care') %>%
head(5) %>%
pull(symbol)
stocks <- tq_get(hc_stocks, complete_cases = TRUE)
stocks <-
stocks %>%
select(symbol, date, adjusted) %>%
group_by(symbol) %>%
transmute(statistic_date = date,
change = log(lag(adjusted)/adjusted)) %>%
ungroup %>%
filter(!is.na(change)) %>%
pivot_wider(names_from = symbol, values_from = change)
library(Amelia)
missmap(stocks)
stocks <-
stocks %>%
select_if(function(x) {all(!is.na(x))}) %>%
select(-statistic_date)
missmap(stocks)
rho = cor(stocks)
rho
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(x[i, j] <= y[j], i = 1:n, j=1:n)
extract_constraints(model)
library(rvest)
library(tidyverse)
tickers <-
'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies#S&P_500_component_stocks' %>%
read_html %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
tickers <-
tickers %>%
rename_all(~ str_replace_all(str_to_lower(.), " ", "_"))
library(tidyquant)
hc_stocks <-
tickers %>%
filter(gics_sector == 'Health Care') %>%
head(5) %>%
pull(symbol)
stocks <- tq_get(hc_stocks, complete_cases = TRUE)
stocks <-
stocks %>%
select(symbol, date, adjusted) %>%
group_by(symbol) %>%
transmute(statistic_date = date,
change = log(lag(adjusted)/adjusted)) %>%
ungroup %>%
filter(!is.na(change)) %>%
pivot_wider(names_from = symbol, values_from = change)
library(Amelia)
missmap(stocks)
stocks <-
stocks %>%
select_if(function(x) {all(!is.na(x))}) %>%
select(-statistic_date)
missmap(stocks)
rho = cor(stocks)
rho
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(x[i, j] <= y[j], i = 1:n, j=1:n)
extract_constraints(model)
library(rvest)
library(tidyverse)
tickers <-
'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies#S&P_500_component_stocks' %>%
read_html %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
tickers <-
tickers %>%
rename_all(~ str_replace_all(str_to_lower(.), " ", "_"))
library(tidyquant)
hc_stocks <-
tickers %>%
filter(gics_sector == 'Health Care') %>%
head(5) %>%
pull(symbol)
stocks <- tq_get(hc_stocks, complete_cases = TRUE)
stocks <-
stocks %>%
select(symbol, date, adjusted) %>%
group_by(symbol) %>%
transmute(statistic_date = date,
change = log(lag(adjusted)/adjusted)) %>%
ungroup %>%
filter(!is.na(change)) %>%
pivot_wider(names_from = symbol, values_from = change)
library(Amelia)
missmap(stocks)
stocks <-
stocks %>%
select_if(function(x) {all(!is.na(x))}) %>%
select(-statistic_date)
missmap(stocks)
rho = cor(stocks)
rho
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
n <- nrow(rho)
q <- 3
weights <- runif(n, max = bin_size)
model <- MIPModel() %>%
add_variable(y[i], i = 1:n, type = "binary") %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(rho[i,j]*x[i, j], i = 1:n, j=1:n), "min") %>%
add_constraint(sum_expr(y[i], i=1:n) == q) %>%
add_constraint(sum_expr(x[i, j], j = 1:n) <= y[i], i = 1:n) %>%
add_constraint(x[i, j] <= y[j], i = 1:n, j=1:n)
extract_constraints(model)
